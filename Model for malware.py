import pandas as pd
import itertools
import numpy as np
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from lightgbm import LGBMClassifier
import os
from urllib.parse import urlparse
from tld import get_tld
import os.path
from googlesearch import search
import re
from sklearn.preprocessing import StandardScaler,LabelEncoder#(used)
                                                # This is the back end work 
data_frame=pd.read_csv('malicious_phish.csv')

#for redirected links 
import requests

def get_redirected_links(url):
    redirected_links = []

    try:
        response = requests.get(url, allow_redirects=True)
        response.raise_for_status()  
        for redirect in response.history:
            redirected_links.append(redirect.url)
        redirected_links.append(response.url)

    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
    
    return redirected_links
# for passing redirected links


for index, link in enumerate(redirected_links):
    print(f"Redirect {index + 1}: {link}")


def main(url):
    
    status = []
    
    status.append(having_ip_address(url))
    status.append(abnormal_url(url))
    status.append(count_dot(url))
    status.append(count_www(url))
    status.append(count_atrate(url))
    status.append(no_of_dir(url))
    status.append(no_of_embed(url))
    
    status.append(shortening_service(url))
    status.append(count_https(url))
    status.append(count_http(url))
    
    status.append(count_per(url))
    status.append(count_ques(url))
    status.append(count_hyphen(url))
    status.append(count_equal(url))
    
    status.append(url_length(url))
    status.append(hostname_length(url))
    status.append(suspicious_words(url))
    status.append(digit_count(url))
    status.append(letter_count(url))
    status.append(fd_length(url))
    tld = get_tld(url,fail_silently=True)
      
    status.append(tld_length(tld))
    
    
    

    return status


def get_prediction_from_url(test_url):
    features_test = main(test_url)
    # we now need a 2D array as a parameter to the predict function.
    features_test = np.array(features_test).reshape((1, -1))


    pred = lgb.predict(features_test)
    if int(pred[0]) == 0:
        
        res="SAFE"
        return res
    elif int(pred[0]) == 1.0:
        
        res="DEFACEMENT"
        return res
    elif int(pred[0]) == 2.0:
        res="PHISHING"
        return res
        
    elif int(pred[0]) == 3.0:
        
        res="MALWARE"
        return res
    

urls = ['titaniumcorporate.co.za','www.youtube.com']
for url in urls:
     print(get_prediction_from_url(url))




#Use of IP or not in domain
def having_ip_address(url):
    match = re.search(
        '(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.'
        '([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|'  # IPv4
        '((0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\/)' # IPv4 in hexadecimal
        '(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}', url)  # Ipv6
    if match:
        # print match.group()
        return 1
    else:
        # print 'No matching pattern found'
        return 0
data_frame['use_of_ip'] = data_frame['url'].apply(lambda i: having_ip_address(i))

from urllib.parse import urlparse

def abnormal_url(url):
    hostname = urlparse(url).hostname
    hostname = str(hostname)
    match = re.search(hostname, url)
    if match:
        # print match.group()
        return 1
    else:
        # print 'No matching pattern found'
        return 0


data_frame['abnormal_url'] = data_frame['url'].apply(lambda i: abnormal_url(i))

def google_index(url):
    site = search(url, 5)
    return 1 if site else 0
data_frame['google_index'] = data_frame['url'].apply(lambda i: google_index(i))

def count_dot(url):
    count_dot = url.count('.')
    return count_dot

data_frame['count.'] = data_frame['url'].apply(lambda i: count_dot(i))
data_frame

def count_www(url):
    url.count('www')
    return url.count('www')

data_frame['count-www'] = data_frame['url'].apply(lambda i: count_www(i))

def count_atrate(url):
     
    return url.count('@')

data_frame['count@'] = data_frame['url'].apply(lambda i: count_atrate(i))


def no_of_dir(url):
    urldir = urlparse(url).path
    return urldir.count('/')

data_frame['count_dir'] = data_frame['url'].apply(lambda i: no_of_dir(i))

def no_of_embed(url):
    urldir = urlparse(url).path
    return urldir.count('//')

data_frame['count_embed_domian'] = data_frame['url'].apply(lambda i: no_of_embed(i))


def shortening_service(url):
    match = re.search('bit\.ly|goo\.gl|shorte\.st|go2l\.ink|x\.co|ow\.ly|t\.co|tinyurl|tr\.im|is\.gd|cli\.gs|'
                      'yfrog\.com|migre\.me|ff\.im|tiny\.cc|url4\.eu|twit\.ac|su\.pr|twurl\.nl|snipurl\.com|'
                      'short\.to|BudURL\.com|ping\.fm|post\.ly|Just\.as|bkite\.com|snipr\.com|fic\.kr|loopt\.us|'
                      'doiop\.com|short\.ie|kl\.am|wp\.me|rubyurl\.com|om\.ly|to\.ly|bit\.do|t\.co|lnkd\.in|'
                      'db\.tt|qr\.ae|adata_frame\.ly|goo\.gl|bitly\.com|cur\.lv|tinyurl\.com|ow\.ly|bit\.ly|ity\.im|'
                      'q\.gs|is\.gd|po\.st|bc\.vc|twitthis\.com|u\.to|j\.mp|buzurl\.com|cutt\.us|u\.bb|yourls\.org|'
                      'x\.co|prettylinkpro\.com|scrnch\.me|filoops\.info|vzturl\.com|qr\.net|1url\.com|tweez\.me|v\.gd|'
                      'tr\.im|link\.zip\.net',
                      url)
    if match:
        return 1
    else:
        return 0
    
    
data_frame['short_url'] = data_frame['url'].apply(lambda i: shortening_service(i))

def count_https(url):
    return url.count('https')

data_frame['count-https'] = data_frame['url'].apply(lambda i : count_https(i))

def count_http(url):
    return url.count('http')

data_frame['count-http'] = data_frame['url'].apply(lambda i : count_http(i))

def count_per(url):
    return url.count('%')

data_frame['count%'] = data_frame['url'].apply(lambda i : count_per(i))

def count_ques(url):
    return url.count('?')

data_frame['count?'] = data_frame['url'].apply(lambda i: count_ques(i))

def count_hyphen(url):
    return url.count('-')

data_frame['count-'] = data_frame['url'].apply(lambda i: count_hyphen(i))

def count_equal(url):
    return url.count('=')

data_frame['count='] = data_frame['url'].apply(lambda i: count_equal(i))

def url_length(url):
    return len(str(url))


#Length of URL
data_frame['url_length'] = data_frame['url'].apply(lambda i: url_length(i))
#Hostname Length

def hostname_length(url):
    return len(urlparse(url).netloc)

data_frame['hostname_length'] = data_frame['url'].apply(lambda i: hostname_length(i))


def suspicious_words(url):
    match = re.search('PayPal|login|signin|bank|account|update|free|lucky|service|bonus|ebayisapi|webscr',
                      url)
    if match:
        return 1
    else:
        return 0
data_frame['sus_url'] = data_frame['url'].apply(lambda i: suspicious_words(i))


def digit_count(url):
    digits = 0
    for i in url:
        if i.isnumeric():
            digits = digits + 1
    return digits


data_frame['count-digits']= data_frame['url'].apply(lambda i: digit_count(i))


def letter_count(url):
    letters = 0
    for i in url:
        if i.isalpha():
            letters = letters + 1
    return letters


data_frame['count-letters']= data_frame['url'].apply(lambda i: letter_count(i))



#First Directory Length
def fd_length(url):
    urlpath= urlparse(url).path
    try:
        return len(urlpath.split('/')[1])
    except:
        return 0

data_frame['fd_length'] = data_frame['url'].apply(lambda i: fd_length(i))

#Length of Top Level Domain
data_frame['tld'] = data_frame['url'].apply(lambda i: get_tld(i,fail_silently=True))


def tld_length(tld):
    try:
        return len(tld)
    except:
        return -1

data_frame['tld_length'] = data_frame['tld'].apply(lambda i: tld_length(i))

data_frame = data_frame.drop("tld",1)



lb_make = LabelEncoder()
data_frame["type_code"] = lb_make.fit_transform(data_frame["type"])

#Predictor Variables
# filtering out google_index as it has only 1 value
X = data_frame[['use_of_ip','abnormal_url', 'count.', 'count-www', 'count@',
       'count_dir', 'count_embed_domian', 'short_url', 'count-https',
       'count-http', 'count%', 'count?', 'count-', 'count=', 'url_length',
       'hostname_length', 'sus_url', 'fd_length', 'tld_length', 'count-digits',
       'count-letters']]

#Target Variable
y = data_frame['type_code']
# splitting data for training 
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2,shuffle=True, random_state=42)

rf = RandomForestClassifier(n_estimators=100,max_features='sqrt')
rf.fit(X_train,y_train)
y_pred_rf = rf.predict(X_test)
print(classification_report(y_test,y_pred_rf,target_names=['benign', 'defacement','phishing','malware']))

score = metrics.accuracy_score(y_test, y_pred_rf)

cm = confusion_matrix(y_test, y_pred_rf)
cm_df = pd.DataFrame(cm,
                     index = ['benign', 'defacement','phishing','malware'], 
                     columns = ['benign', 'defacement','phishing','malware'])
plt.figure(figsize=(8,6))
sns.heatmap(cm_df, annot=True,fmt=".1f")


# using lgbm classifier model 
lgb = LGBMClassifier(objective='multiclass',boosting_type= 'gbdt',n_jobs = 5, 
          silent = True, random_state=5)
LGB_C = lgb.fit(X_train, y_train)


y_pred_lgb = LGB_C.predict(X_test)
print(classification_report(y_test,y_pred_lgb,target_names=['benign', 'defacement','phishing','malware']))

score = metrics.accuracy_score(y_test, y_pred_lgb)
print("accuracy:   %0.3f" % score)

#XGboost 
xgb_c = xgb.XGBClassifier(n_estimators= 100)
xgb_c.fit(X_train,y_train)
y_pred_x = xgb_c.predict(X_test)
print(classification_report(y_test,y_pred_x,target_names=['benign', 'defacement','phishing','malware']))


score = metrics.accuracy_score(y_test, y_pred_x)
print("accuracy:   %0.3f" % score)